@using MyMoney.Api.Sdk.Api
@using MyMoney.Api.Sdk.Api.Accounts.Requests
@using MyMoney.Api.Sdk.Api.Accounts.Responses
@using MyMoney.Web.Services
@using MyMoney.Web.Components.UI
@inject MyMoneyApiClient apiClient;
@inject CacheService cache;
@inject IJSRuntime JS;
@inject NavigationManager navigation;

<div>
    <table class="table table-hover table-responsive-sm col-12 col-xl-6">
        <thead>
        <tr>
            <th>Account Name</th>
            <th>Amount</th>
            <th>Currency</th>
            <th>Bank Account</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <input id="accountName"
                           placeholder="Search or Create..."
                           class="form-control form-control-sm"
                           @bind="newAccountName"
                           @oninput="(text) => OnTypeAccountName(text)"/>
                </td>
                <td>
                    <!-- TODO: We could set amount when creating a new account. -->
                </td>
                <td>
                    <select id="currency"
                            @bind="newAccountCurrency"
                            class="form-control form-control-sm">
                        <option value="UYU">UYU</option>
                        <option value="USD">USD</option>
                    </select>
                </td>
                <td>
                    <input id="bankAccount"
                           placeholder="Bank Account"
                           class="form-control form-control-sm"
                           @bind="newBankAccount"/>
                </td>
                <td>
                    <button class="btn btn-primary btn-sm"
                            disabled="@(!isCreatingAccount)"
                            @onclick="AddAccount">
                        Create
                    </button>
                </td>
            </tr>
            @if (isLoading)
            {
               @foreach(var i in Enumerable.Range(0, 10))
               {
                   <tr>
                       <td class="table-responsive-cell">
                           <div class="skeleton skeleton-text"></div>
                       </td>
                       <td class="table-responsive-cell">
                           <div class="skeleton skeleton-text"></div>
                       </td>
                       <td class="table-responsive-cell">
                           <div class="skeleton skeleton-text"></div>
                       </td>
                       <td class="table-responsive-cell">
                           <div class="skeleton skeleton-text"></div>
                       </td>
                       <td>
                           <div class="skeleton skeleton-text"></div>
                       </td>
                   </tr>
               }
            }
            else
            {
                @foreach (var account in accountsFiltered.OrderBy(x => x.Name))
                {
                    <tr>
                        <td @onclick="() => OnClickRow(account)" class="table-responsive-cell">@account.Name</td>
                        <td @onclick="() => OnClickRow(account)" class="@(account.Amount < 0 ? "text-danger" : "text-success") table-responsive-cell">
                            @account.Amount
                        </td>
                        <td @onclick="() => OnClickRow(account)">
                            @account.Currency
                        </td>
                        <td @onclick="() => OnClickRow(account)" class="table-responsive-cell">
                            @account.BankAccount
                        </td>
                        <td>
                            <button class="btn btn-outline-danger btn-sm"
                                    @onclick="() => ShowConfirmDialog(account)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    string token = string.Empty;
    bool isLoading = true;
    private List<AccountResponse> accountsFromServer = new();
    private List<AccountResponse> accountsFiltered = new();
    private string newAccountName;
    private string newAccountCurrency = "UYU";
    private string newBankAccount;
    private decimal newAccountAmount;
    private bool isCreatingAccount = false;
    
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadAccounts();
        isLoading = false;
    }

    private void OnClickRow(AccountResponse account)
    {
        navigation.NavigateTo($"/account/{account.Id}");
    }
    
    private async Task LoadAccounts()
    {
        token = await cache.GetValueAsync<string>("UserToken");
        var response = await apiClient.Accounts.GetUserAccounts(token);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            accountsFromServer = response.Data.Accounts;
            accountsFiltered = accountsFromServer;
        }
        else if(response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await cache.RemoveAsync("UserToken");
            navigation.NavigateTo("/login");
        }
    }
    
    private async Task AddAccount()
    {
        this.isLoading = true;
        // Add account to server
        var postRequest = await apiClient.Accounts.PostAccount(token, new CreateAccountRequest()
        {
            Name = newAccountName,
            BankAccount = newBankAccount,
            Currency = newAccountCurrency
        });

        if (postRequest.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await this.LoadAccounts();
        }

        this.isLoading = false;
        
        if (postRequest.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await cache.RemoveAsync("UserToken");
            navigation.NavigateTo("/login");
        }

        StateHasChanged();
        
        // Reset fields
        newAccountName = string.Empty;
        newAccountAmount = 0;
        newBankAccount = string.Empty;
        isCreatingAccount = false;
    }
    
    private async Task RemoveAccountAsync(AccountResponse account)
    {
        var response = await apiClient.Accounts.DeleteAccount(token, account.Id);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            accountsFromServer.Remove(account);
            accountsFiltered = accountsFromServer;
            StateHasChanged();
        }
        
    }
    
    private async Task ShowConfirmDialog(AccountResponse account)
    {
        var result = await JS.InvokeAsync<bool>("showConfirmDialog", "Are you sure?");
        if (result)
        {
            RemoveAccountAsync(account);
        }
    }

    private Task DoSomething()
    {
        // Implement your logic here
        return Task.CompletedTask;
    }

    private void OnTypeAccountName(ChangeEventArgs e)
    {
        newAccountName = e?.Value?.ToString() ?? string.Empty;
        accountsFiltered = accountsFromServer
            .Where(a => a.Name.Contains(newAccountName, StringComparison.InvariantCultureIgnoreCase))
            .ToList();

        isCreatingAccount = accountsFiltered.All(a => a.Name.ToLower() != newAccountName.ToLower()) && !string.IsNullOrWhiteSpace(newAccountName);
    }
}

<script>
    function showConfirmDialog(message) {
        return confirm(message);
    }
</script>

<style>
    .table {
        width: 100%;
        table-layout: auto;
        /* Optional: Add a max-width if you want to limit the table's width */
        max-width: 100%;
    }
    .table-hover tbody tr:hover {
        background-color: rgba(38, 101, 227, 0.48);
        cursor: pointer;
    }
    .table-responsive-cell {
        overflow-x: auto;
        white-space: nowrap;
    }
    .table-responsive-cell td {
        white-space: nowrap;
    }
    @@media (max-width: 576px) {
    .table thead th {
        font-size: 0.8rem; /* Reduce el tamaño de los encabezados */
    }
    .table tbody td {
        font-size: 0.8rem; /* Reduce el tamaño de las celdas */
    }
    .form-control-sm {
        padding: 0.25rem 0.5rem; /* Reduce el padding de los inputs pequeños */
    }
    .btn-sm {
        padding: 0.25rem 0.5rem; /* Reduce el padding de los botones pequeños */
        font-size: 0.8rem; /* Reduce el tamaño de fuente de los botones */
    }
    }
</style>