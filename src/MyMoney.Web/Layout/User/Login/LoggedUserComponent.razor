
@using Microsoft.AspNetCore.Components.Web
@using System
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@using MyMoney.Web.Services
@inject CacheService CacheService
@inject NavigationManager navigation;

<style>
    .logout-menu {
        display: inline;
        position: absolute;
        background-color: grey;
        top: 70px;
        right: 20px;
        z-index: 1000;
        animation: fadeInDown 0.5s;
    }
</style>

@if (showLogout)
{
    <div class="row align-items-center">
        <div class="col">
            <div class="col d-flex align-items-center justify-content-between">
                <p class="m-0">@UserName</p>
                <div class=""  @onclick="Logout">
                    <a class="btn btn-outline-danger">Logout</a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showLogout = false;
    private string UserName = string.Empty;

    protected override void OnInitialized()
    {
        OnInitializedAsync();
    }
    protected async Task OnInitializedAsync()
    {
        string token = await CacheService.GetValueAsync<string>("UserToken");
        CacheService.Subscribe("UserToken", OnUserNameChanged);
        UserName = GetUserNameFromToken(token);
        showLogout = !string.IsNullOrWhiteSpace(UserName);
        await InvokeAsync(StateHasChanged);
    }

    private void OnUserNameChanged(object? value)
    {
        if(value is not null)
        {
            UserName = GetUserNameFromToken(value.ToString());
            showLogout = true;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            showLogout = false;
        }
    }

    private string GetUserNameFromToken(string token)
    {
        if (string.IsNullOrWhiteSpace(token))
        {
            throw new Exception("Invalid token");
        }
        
        var parts = token.Split('.');
        if (parts.Length != 3)
        {
            throw new Exception("Invalid token");
        }
        
        var payload = parts[1];
        var payloadJson = Encoding.UTF8.GetString(Base64UrlTextEncoder.Decode(payload));
        var payloadData = JsonSerializer.Deserialize<Dictionary<string, object>>(payloadJson);
        if (payloadData is null)
        {
            throw new Exception("Invalid token");
        }
        
        return payloadData["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"].ToString();
    }

    private async Task Logout()
    {
        await CacheService.RemoveAsync("UserToken");
        navigation.NavigateTo("/login");
    }
}