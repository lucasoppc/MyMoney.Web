@page "/register"

@using System.ComponentModel.DataAnnotations
@using MyMoney.Api.Sdk.Api
@using MyMoney.Api.Sdk.Api.Users.Requests
@using MyMoney.Web.Services
@using MyMoney.Web.Components.UI
@using Newtonsoft.Json
@inject MyMoneyApiClient ApiClient
@inject CacheService CacheService
@inject NavigationManager navigation
@layout LoginLayout

<div class="grid">
    <div class="order__left centered">
        <div class="form">
            <div class="logo"></div>

            <h4>
                Sign up and keep your money organized like a capybara in a hot spring ðŸ¤Ž
            </h4>

            <EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">

                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="registerModel.Name"/>
                </div>

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email"/>
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password"/>
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword"/>
                </div>
                
                <button type="submit" class="login__button  @buttonClass" disabled="@isLoading">Register</button>
                
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <ul>
                    @if (!string.IsNullOrEmpty(Message))
                    {
                    <div class="text-danger text-start"><li>@Message</li></div>
                    }

                    @if (ErrorMessages.Any())
                    {
                    @foreach(var error in ErrorMessages)
                    {
                    <div class="text-danger text-start"><li>@error</li></div>
                    }
                    }
                </ul>
            </EditForm>
            
            <div class="signup">
                <label class="remember_me">
                    Already have an account?</label><a href="/login" class="forgot__password" style="text-decoration: none;"><strong>Log in here.</strong></a>
            </div>
        </div>
    </div><!-- order__left centered -->

    <div class="order__right centered no__overflow">
        <img class="img" src="https://th.bing.com/th/id/OIG3.LMRYDpHqBwqagT_ok2Zl?w=1024&h=1024&rs=1&pid=ImgDetMain"/>
    </div><!-- order__right centered no__overflow -->
</div><!-- end grid -->

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string Message = "";
    private bool isLoading = false;
    private List<string> ErrorMessages = new List<string>();
    private string buttonClass => isLoading ? "skeleton skeleton-button" : string.Empty;

    private async Task HandleValidSubmit()
    {
        Message = string.Empty;
        isLoading = true;
        await OnRegister(registerModel.Name, registerModel.Email, registerModel.Password, registerModel.ConfirmPassword);
        isLoading = false;
    }

    public class RegisterModel
    {
        [Required]
        public string Name { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [MinLength(6)]
        public string Password { get; set; }

        [Required]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
        
    }

    private async Task OnRegister(string name, string email, string password, string confirmPassword)
    {
        try
        {
            var newUser = new CreateUserRequest
            {
                Email = email,
                Name = name,
                Password = password,
                DefaultCurrency = "UYU"
            };
            
            var registerResponse = await ApiClient.Users.CreateUser(newUser);
            if (registerResponse.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await CacheService.SetValueAsync<string>("UserToken", registerResponse.Data.Token);
                navigation.NavigateTo("/accounts");
            }
            else
            {
                Message = registerResponse.ErrorMessage;
                ErrorMessages = registerResponse.ErrorList ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Message = "An error occurred: " + ex.Message;
        }
    }
}

<style>
    *, *:after, *:before {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
        font-family: sans-serif;
    }
    body {
        min-height: 100vh;
    }
    .grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        height: 100vh;
    }
    .order__left {
        order: 1;
        padding:  40px;
    }
    .order__right {
        order: 2;
    }
    .centered {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .no__overflow {
        display: flex;
        align-items: center;
        overflow: hidden;
    }
    .form {
        max-width: 500px;
    }
    .logo {
        margin-bottom: 12px;
    }
    h4 {
        text-align: left;
        margin-bottom: 30px;
        letter-spacing: 0.2px;
        line-height: 20px;
    }
    ::-webkit-input-placeholder {
        color: #A29CA8;
    }
    :-ms-input-placeholder {
        color: #A29CA8;
    } ::placeholder {
          color: #A29CA8;
      }
    .justify__space_between {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin: 30px 0 26px 0;
    }
    input[type=checkbox], label {
        margin-right: 4px;
        cursor: pointer;
        outline-color: #B595D4;
    }
    .remember_me, .signup {
        color: #867992;
    }
    .forgot__password {
        color: #e9e0fb;
        text-align: left;
        outline-color: #B595D4;
    }
    .forgot__password:active {
        color: #867992;
    }
    .login__button {
        outline-color: #734E96;
        width: 100%;
        border: none;
        background-color: #A26ED4;
        padding: 10px 15px;
        margin-top: 1em;
        color: #fff;
        border-radius: 0.25rem;
        font-size: 16px;
        cursor: pointer;
        transition: box-shadow 0.25s ease-in-out, background-color 0.3s;
    }
    .login__button:hover {
        box-shadow: 0 0 0 0.25rem #DAC5EE;
    }
    .login__button:active {
        background-color: #874DBF;
        box-shadow: 0 0 0 0.35rem #DAC5EE;
    }
    .signup {
        font-size: 14px;
        text-align: center;
        margin-top: 32px;
    }
    .img {
        height: 100%;
        object-fit: cover;
        max-width: auto;
    }
    @@media only screen and (max-width:  800px) {
    .grid {
        grid-template-columns: auto;
    }
    .order__left {
        order: 2;
        padding: 20px;
    }
    .order__right {
        order: 1;
    }
    .centered {
        align-items: flex-start;
    }
    .no__overflow {
        align-items: flex-start;
    }
    h4 {
        text-align: center;
    }
    .img {
        width: 100vw;
    }
    }
    @@media only screen and (max-height:  600px) {
    .img {
        width: 120%;
    }
    }


</style>