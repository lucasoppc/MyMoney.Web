@page "/account/{accountId}"
@using System.Globalization
@using MyMoney.Api.Sdk.Api
@using MyMoney.Api.Sdk.Api.Accounts.Responses
@using MyMoney.Api.Sdk.Api.Transactions.Requests
@using MyMoney.Api.Sdk.Api.Transactions.Responses
@using MyMoney.Web.Services
@using MyMoney.Web.Components.UI
@using MyMoney.Web.Components.Transactions
@inject MyMoneyApiClient client
@inject CacheService cache
@inject NavigationManager navigation
@inject IJSRuntime JS

<div class="d-flex justify-content-between align-items-center">
    <h3 class="text-title">"@account?.Name" Transactions</h3>
    <h3 class="text-end m-0">
        $ @account?.Amount
        <span class="currency-label">UYU</span>
    </h3>
</div>


<div class="highlighted-background">
    <TransferToAccountComponent AccountFrom="@account" OnTransfer="UpdateTransactions"/>
</div>

<table class="table table-hover table-responsive-sm col-12 col-xl-6">
    <thead>
    <tr>
        <th>Date</th>
        <th>Description</th>
        <th>Amount</th>
        <th>Currency</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td class="table-responsive-cell">
            <input id="newTransactionDate"
                   type="date"
                   class="form-control form-control-sm"
                   @bind="newTransactionDate"
            />
        </td>
        <td>
            <input id="newTransactionDescription"
                   type="text"
                   class="form-control form-control-sm"
                   @bind="newTransactionDescription"
                   @oninput="(text) => OnTypeTransactionDescription(text)"
            />
        </td>
        <td>
            <input id="newTransactionAmount"
                   type="number"
                   class="form-control form-control-sm text-end"
                   placeholder="Amount"
                   @bind="newTransactionAmount"
            />
        </td>
        <td>
            @if(isLoading)
            {
                <Spinner Width="40px" />
            }
            else
            {
                <button class="btn btn-primary btn-sm"
                        disabled="@(!isCreatingTransaction)"
                        @onclick="CreateTransaction">
                    Create
                </button>
            }
        </td>
        <td>

        </td>
    </tr>
    @if (transactions == null)
    {
        @foreach(var i in Enumerable.Range(0, 10))
        {
        <tr>
            <td class="table-responsive-cell">
                <div class="skeleton skeleton-text"></div>
            </td>
            <td class="table-responsive-cell">
                <div class="skeleton skeleton-text"></div>
            </td>
            <td class="table-responsive-cell">
                <div class="skeleton skeleton-text"></div>
            </td>
            <td class="table-responsive-cell">
                <div class="skeleton skeleton-text"></div>
            </td>
            <td>
                <div class="skeleton skeleton-text"></div>
            </td>
        </tr>
        }
    }
    else
    {
        @foreach (var transaction in transactions)
        {
            <tr @onclick="() => OnClickRow(transaction)">
                <td class="table-responsive-cell">@transaction.Date.ToString("dd/MM/yyyy")</td>
                <td class="table-responsive-cell">@transaction.Description</td>
                <td class="@(transaction.Amount < 0 ? "text-danger" : "text-success") table-responsive-cell text-end">
                    @transaction.Amount
                </td>
                <td>
                    @transaction.Currency
                </td>
                <td>
                    <button class="btn btn-outline-danger btn-sm"
                            @onclick="() => ShowConfirmDialog(transaction)">
                        Delete
                    </button>
                </td>
            </tr>
        } 
    }
    
    </tbody>
</table>



@code {
    [Parameter]
    public string accountId { get; set; }
    
    string token = string.Empty;
    private List<TransactionResponse> transactions;
    private AccountResponse account;

    private bool isLoading = false;
    private bool isCreatingTransaction = false;
    private DateTime newTransactionDate = DateTime.Now;
    private string newTransactionDescription;
    private decimal? newTransactionAmount;

    protected override async Task OnParametersSetAsync()
    {
        var getAccount = client.Accounts.GetUserAccounts(token);
        var getTransactions = client.Transactions.GetAccountTransactions(token, accountId);
        await Task.WhenAll(getAccount, getTransactions);
        if (getTransactions.Result.IsSuccessfulStatusCode)
        {
            transactions = getTransactions.Result.Data.Transactions.OrderByDescending(t => t.Date).ToList();
        }
        if (getAccount.Result.IsSuccessfulStatusCode)
        {
            account = getAccount.Result.Data.Accounts.FirstOrDefault(a => a.Id == accountId);
        }
        
        StateHasChanged();
    }

    private async Task UpdateTransactions()
    {
        // wait a few seconds for the transaction be processed and amount updated
        await Task.Delay(1000); 
        await OnParametersSetAsync();
        await Task.Delay(8000); 
        await OnParametersSetAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        token = await cache.GetValueAsync<string>("UserToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            navigation.NavigateTo("/login");
        }
        
    }

    private void OnTypeTransactionDescription(ChangeEventArgs e)
    {
        newTransactionDescription = e?.Value?.ToString() ?? string.Empty;
        var transactionsFiltered = transactions
            .Where(t => t.Description.Contains(newTransactionDescription, StringComparison.InvariantCultureIgnoreCase))
            .ToList();

        isCreatingTransaction = !string.IsNullOrWhiteSpace(newTransactionDescription);
        StateHasChanged();
    }
    
    private void OnClickRow(TransactionResponse transaction)
    {
        
    }

    private async Task CreateTransaction()
    {
        if (newTransactionAmount is null or 0)
        {
            return;
        }
        
        isLoading = true;
        var transaction = new CreateTransactionRequest
        {
            AccountId = accountId,
            Amount = newTransactionAmount.Value,
            Currency = account?.Currency ?? "UYU",
            Date = newTransactionDate.ToString("O"),
            Description = newTransactionDescription
        };

        var result = await client.Transactions.PostTransaction(token, transaction);

        if (result.IsSuccessfulStatusCode)
        {
            await OnParametersSetAsync();
        }
        
        isLoading = false;
    }
    
    private async Task ShowConfirmDialog(TransactionResponse transaction)
    {
        var result = await JS.InvokeAsync<bool>("showConfirmDialog", "Are you sure?");
        if (result)
        {
            var revertTransaction = new CreateTransactionRequest
            {
                AccountId = transaction.AccountId,
                Amount = transaction.Amount * -1,
                Currency = transaction.Currency,
                Date = DateTime.Now.ToString("O"),
                Description = $"Reverted: {transaction.Description}"
            };

            await client.Transactions.PostTransaction(token, revertTransaction);
            await OnParametersSetAsync();
        }
    }
}

<script>
    function showConfirmDialog(message) {
        return confirm(message);
    }
</script>

<style>
    .table {
        width: 100%;
        table-layout: auto;
        /* Optional: Add a max-width if you want to limit the table's width */
        max-width: 100%;
    }
    .table-hover tbody tr:hover {
        background-color: rgba(38, 101, 227, 0.48);
        cursor: pointer;
    }
    .highlighted-background {
        background-color: #202020; /* Puedes cambiar este color al que prefieras */
        padding: 10px; /* Opcional: Agrega un poco de padding para mayor claridad */
        border-radius: 5px; /* Opcional: Agrega bordes redondeados */
    }
    .table-responsive-cell {
        overflow-x: auto;
        white-space: nowrap;
    }
    .table-responsive-cell td {
        white-space: nowrap;
    }
    .currency-label {
        font-size: 0.50em;
        vertical-align: top;
    }
    
</style>